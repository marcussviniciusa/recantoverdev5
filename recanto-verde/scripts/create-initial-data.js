const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('‚ùå MONGODB_URI n√£o encontrado no .env.local');
  process.exit(1);
}

async function connectDB() {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao MongoDB:', error);
    process.exit(1);
  }
}

async function createInitialUsers() {
  console.log('\nüìã Criando usu√°rios iniciais...');
  
  try {
    const usersCollection = mongoose.connection.db.collection('users');
    
    // Verificar se j√° existem usu√°rios
    const existingUsers = await usersCollection.find().toArray();
    if (existingUsers.length > 0) {
      console.log('‚ö†Ô∏è  Usu√°rios j√° existem no banco de dados');
      return;
    }

    // Hash das senhas
    const adminPasswordHash = await bcrypt.hash('admin123', 10);
    const garcomPasswordHash = await bcrypt.hash('garcom123', 10);

    const users = [
      {
        username: 'admin',
        email: 'admin@recantoverde.com',
        password: adminPasswordHash,
        role: 'recepcionista',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        username: 'joao',
        email: 'joao@recantoverde.com',
        password: garcomPasswordHash,
        role: 'garcom',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        username: 'maria',
        email: 'maria@recantoverde.com',
        password: garcomPasswordHash,
        role: 'garcom',
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    await usersCollection.insertMany(users);
    console.log('‚úÖ Usu√°rios criados com sucesso');
    console.log('üë®‚Äçüíº Admin: admin@recantoverde.com / admin123');
    console.log('üë®‚Äçüç≥ Gar√ßom Jo√£o: joao@recantoverde.com / garcom123');
    console.log('üë©‚Äçüç≥ Gar√ßom Maria: maria@recantoverde.com / garcom123');

  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rios:', error);
  }
}

async function createInitialTables() {
  console.log('\nü™ë Criando mesas iniciais...');
  
  try {
    const tablesCollection = mongoose.connection.db.collection('tables');
    
    // Verificar se j√° existem mesas
    const existingTables = await tablesCollection.find().toArray();
    if (existingTables.length > 0) {
      console.log('‚ö†Ô∏è  Mesas j√° existem no banco de dados');
      return;
    }

    const tables = [];
    for (let i = 1; i <= 10; i++) {
      tables.push({
        number: i,
        capacity: i <= 4 ? 2 : i <= 8 ? 4 : 6,
        status: 'disponivel',
        createdAt: new Date(),
        updatedAt: new Date()
      });
    }

    await tablesCollection.insertMany(tables);
    console.log('‚úÖ 10 mesas criadas com sucesso');

  } catch (error) {
    console.error('‚ùå Erro ao criar mesas:', error);
  }
}

async function createInitialProducts() {
  console.log('\nüçΩÔ∏è Criando produtos iniciais...');
  
  try {
    const productsCollection = mongoose.connection.db.collection('products');
    
    // Verificar se j√° existem produtos
    const existingProducts = await productsCollection.find().toArray();
    if (existingProducts.length > 0) {
      console.log('‚ö†Ô∏è  Produtos j√° existem no banco de dados');
      return;
    }

    const products = [
      // Entradas
      {
        name: 'Bruschetta Tradicional',
        description: 'P√£o italiano com tomate fresco, manjeric√£o e azeite',
        price: 18.90,
        category: 'entradas',
        available: true,
        preparationTime: 10,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Carpaccio de Carne',
        description: 'Fatias finas de carne bovina com r√∫cula e parmes√£o',
        price: 32.90,
        category: 'entradas',
        available: true,
        preparationTime: 15,
        createdAt: new Date(),
        updatedAt: new Date()
      },

      // Pratos Principais
      {
        name: 'Salm√£o Grelhado',
        description: 'Salm√£o grelhado com legumes e molho de ervas',
        price: 45.90,
        category: 'pratos-principais',
        available: true,
        preparationTime: 25,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Risotto de Camar√£o',
        description: 'Risotto cremoso com camar√µes frescos e a√ßafr√£o',
        price: 38.90,
        category: 'pratos-principais',
        available: true,
        preparationTime: 30,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Picanha na Chapa',
        description: 'Picanha grelhada com batatas r√∫sticas e vinagrete',
        price: 52.90,
        category: 'carnes',
        available: true,
        preparationTime: 20,
        createdAt: new Date(),
        updatedAt: new Date()
      },

      // Massas
      {
        name: 'Lasanha √† Bolonhesa',
        description: 'Lasanha tradicional com molho bolonhesa e queijos',
        price: 28.90,
        category: 'massas',
        available: true,
        preparationTime: 35,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Spaghetti Carbonara',
        description: 'Massa com bacon, ovos, queijo parmes√£o e pimenta',
        price: 26.90,
        category: 'massas',
        available: true,
        preparationTime: 18,
        createdAt: new Date(),
        updatedAt: new Date()
      },

      // Bebidas
      {
        name: '√Ågua Mineral',
        description: '√Ågua mineral natural sem g√°s - 500ml',
        price: 4.50,
        category: 'bebidas',
        available: true,
        preparationTime: 2,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Refrigerante Lata',
        description: 'Coca-Cola, Guaran√° ou Fanta - 350ml',
        price: 6.90,
        category: 'bebidas',
        available: true,
        preparationTime: 2,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Suco Natural',
        description: 'Suco natural de laranja, lim√£o ou maracuj√°',
        price: 8.90,
        category: 'bebidas',
        available: true,
        preparationTime: 5,
        createdAt: new Date(),
        updatedAt: new Date()
      },

      // Sobremesas
      {
        name: 'Tiramisu',
        description: 'Sobremesa italiana com caf√© e mascarpone',
        price: 16.90,
        category: 'sobremesas',
        available: true,
        preparationTime: 5,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Petit Gateau',
        description: 'Bolinho de chocolate quente com sorvete de baunilha',
        price: 19.90,
        category: 'sobremesas',
        available: true,
        preparationTime: 12,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];

    await productsCollection.insertMany(products);
    console.log(`‚úÖ ${products.length} produtos criados com sucesso`);

  } catch (error) {
    console.error('‚ùå Erro ao criar produtos:', error);
  }
}

async function main() {
  console.log('üöÄ Iniciando configura√ß√£o inicial do banco de dados...');
  
  await connectDB();
  await createInitialUsers();
  await createInitialTables();
  await createInitialProducts();
  
  console.log('\n‚ú® Configura√ß√£o inicial conclu√≠da!');
  console.log('\nüìã Credenciais de acesso:');
  console.log('üë®‚Äçüíº Admin: admin@recantoverde.com / admin123');
  console.log('üë®‚Äçüç≥ Gar√ßom Jo√£o: joao@recantoverde.com / garcom123');
  console.log('üë©‚Äçüç≥ Gar√ßom Maria: maria@recantoverde.com / garcom123');
  
  await mongoose.disconnect();
  console.log('\n‚úÖ Desconectado do banco de dados');
}

main().catch(error => {
  console.error('‚ùå Erro na execu√ß√£o:', error);
  process.exit(1);
}); 